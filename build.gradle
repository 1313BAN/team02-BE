plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	//annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// WebClient
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// AI
	implementation 'org.springframework.ai:spring-ai-starter-model-openai:1.0.0'
<<<<<<< HEAD
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDir querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean {
    delete file(querydslDir)
=======
>>>>>>> cb5b223d73531908668b69df4310acf0a0fc9288
}

tasks.named('test') {
	useJUnitPlatform()
}

// sourceSets.main.java.srcDir "$buildDir/generated/sources/annotationProcessor/java/main"
